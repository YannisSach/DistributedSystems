import java.io.IOException;
import java.net.Socket;
import java.util.Collection;
import java.util.Iterator;

public class ChainServer extends Server{
	public static int k=Util.k,INSK=4,DELK=3;
	
	
	public ChainServer (int idx, int myId,int MyPort){
		super(idx, myId,MyPort);
		
		ChainServer.k = Util.k;
	}
	
	@Override
	public void run() {
		Socket serviceSocket = null;
		
		while (true) {
			
			if (departed) {
				print("Goodbye");
				return;
			}
			
			//print("next: "+ nextId + ", prev: " + prevId);
			//wait for requests
		    try {
		       serviceSocket = ss.accept();
		    }
		    catch (IOException e) {
		       System.out.println(e);
		    }
		    
		    MySocket sock = new MySocket(serviceSocket);
		    String request = sock.read();
		    
		    debug(request);
		    String[] requestLst = request.split(",");
		    //got request
		    boolean isFirst = false;
		    
		    if (requestLst[SRC].equals("INIT")){
		    	isFirst = true;
		    	requestLst[SRC] = "" + this.myPort;	
		    }
		    if (requestLst[CMD].equals("JOIN")){
		    	JoinRequest(requestLst,isFirst);
		    }
		    else if (requestLst[CMD].equals("CONNECT")){
		    	Connect(requestLst);
		    }
		    else if (requestLst[CMD].equals("DEPART")) {
		    	DepartRequest(requestLst); 
		    }
		    else if (requestLst[CMD].equals("INSERT")){
		    	this.insertRequest(requestLst);
		    	
		    }
		    else if (requestLst[CMD].equals("INSERT_R")){
		    	this.insertReplica(requestLst);
		    }
		    else if (requestLst[CMD].equals("QUERY")){
		    	if (requestLst[KEY].equals("*")){
		    		this.queryStarRequest(requestLst);
		    	}
		    	else{
		    		this.queryRequest(requestLst);
		    	}		    	
		    }
		    else if (requestLst[CMD].equals("DELETE")){
		    	deleteRequest(requestLst);
		    }
		    else if (requestLst[CMD].equals("DELETE_R")){
		    	this.deleteReplica(requestLst);
		    }
		    else if (requestLst[CMD].equals("INSERTED")){
		    	//this.printQueryAnswer(requestLst[CMD].toLowerCase() + ","+requestLst[KEY]+","+requestLst[VAL]);
		    	//Util.inserts.decrementAndGet();
		    }
		    else if (requestLst[CMD].equals("FOUND")){
		    	//this.printQueryAnswer(requestLst[CMD].toLowerCase() + ","+requestLst[KEY]+","+requestLst[VAL]);
		    }
		    else if (requestLst[CMD].equals("NOT_FOUND")){
		    	//this.printQueryAnswer(requestLst[CMD].toLowerCase() + ","+requestLst[KEY]);
		    	
		    }
		    else if (requestLst[CMD].equals("DIE")){
		    	print(this);
		    	return;
		    }
		    else if (requestLst[CMD].equals("PRINT_N")){
		    	this.print("Next: " + this.nextId + "\nPrev: "+ this.prevId);
		    }
			
		}
	    
	    
	}
	
	@Override 
	public String toString(Object o){
		Collection<Bucket> bc = buckets.values();
		ChainServer s = (ChainServer) o;
		String prefix  = ""+ this.idx + "(" + this.myId + ")" + "Next:" + this.nextPort + " " + this.nextId + "Prev:" + this.prevPort + " " + this.prevId;
		for (Bucket b : bc){
			for (Song sg : b){
				ReplicaSong rs = (ReplicaSong) sg;
				S
			}
		}
	}
	
	
	@Override
	public void deleteRequest(String[] requestLst){
		int hashed = Util.hash(requestLst[KEY]);
		int srcPort = Integer.parseInt(requestLst[SRC]);
		if (isBetween(hashed,this.prevId,this.myId)){
			delete(new ReplicaSong(requestLst[KEY], null,-1));
			MySocket.send(this.nextPort, "" + srcPort+ "DELETE_R"+requestLst[KEY]+","+1);
		}
		else{
			MySocket.send(this.nextPort, requestLst[SRC] + ",DELETE," + requestLst[KEY]);
		}
	}
	
	public void deleteReplica(String[] requestLst){
		int srcPort = Integer.parseInt(requestLst[SRC]);
		int distance = Integer.parseInt(requestLst[DELK]);
		if (distance < k){
			delete(new ReplicaSong(requestLst[KEY],null,-1));//fst replica
			if (distance == k-1)//last replica node
				MySocket.send(srcPort, "" + this.myId + ",DELETED,"+requestLst[KEY]);
			else 
				MySocket.send(this.nextPort, "" + srcPort+ ",DELETE_R,"+requestLst[KEY]+","+(distance+1));			
		}
		
	}

	//???
	@Override
	public void TransferAll(){
		Collection<Bucket> bc = buckets.values();
		int port = this.nextPort;
		for(Bucket b : bc){
				for(Song s : b){
					ReplicaSong rs = ((ReplicaSong) s);
					if (rs.distance == 0)
						MySocket.send(port, ""+this.myPort+",INSERT,"+""+s.Key+","+s.Val);
					else if (rs.distance<k)
						MySocket.send(port, ""+this.myPort+",INSERT_R,"+""+s.Key+","+s.Val+","+(rs.distance));
				}
				//this.buckets.remove(b.HashedKey); not needed since it will exit

		}
	}
	
	//??
	@Override
	public void TransferSome(){
		//print("TransferSome");
		Collection<Bucket> bc = buckets.values();
		int port = this.prevPort;
		Iterator<Bucket> iter = (bc).iterator();
		while(iter.hasNext()){
			Bucket b = iter.next();
			if (!isBetween(b.HashedKey,this.prevId,this.myId)){
				for(Song s : b){
					ReplicaSong rs = ((ReplicaSong) s);
					if (rs.distance == 0)
						MySocket.send(port, ""+this.myPort+",INSERT,"+""+s.Key+","+s.Val);
					else if (rs.distance<k)
						MySocket.send(port, ""+this.myPort+",INSERT_R,"+""+s.Key+","+s.Val+","+(rs.distance));
				}
				//this.buckets.remove(b.HashedKey); not needed since it will exit
				buckets.remove(b.HashedKey);
			}

		}
	}
	
	@Override
	public void insertRequest(String[] requestLst){
		int hashed = Util.hash(requestLst[KEY]);
		int srcPort = Integer.parseInt(requestLst[SRC]);
		if (isBetween(hashed,this.prevId,this.myId)){
			insert(new ReplicaSong(requestLst[KEY],requestLst[VAL],0));//fst replica
			MySocket.send(this.nextPort, "" + srcPort+ ",INSERT_R,"+requestLst[KEY]+","+requestLst[VAL]+","+1);
		}
		else{
			MySocket.send(this.nextPort,requestLst[SRC] + ",INSERT," + requestLst[KEY] + "," + requestLst[VAL]);
		}
	}
	
	public void insertReplica(String[] requestLst){;
		int srcPort = Integer.parseInt(requestLst[SRC]);
		int distance = Integer.parseInt(requestLst[INSK]);
		if (distance < k){
			insert(new ReplicaSong(requestLst[KEY],requestLst[VAL],distance));//fst replica
			if (distance == k-1){
				MySocket.send(srcPort, "" + this.myId + ",INSERTED,"+requestLst[KEY]+","+requestLst[VAL]);
				this.printQueryAnswer("inserted" + ","+requestLst[KEY]+","+requestLst[VAL]);
				this.print("inserted" + ","+requestLst[KEY]+","+requestLst[VAL]);
				Util.inserts.decrementAndGet();
			}
			MySocket.send(this.nextPort, "" + srcPort+ ",INSERT_R,"+requestLst[KEY]+","+requestLst[VAL]+","+(distance+1));			
		}
		else if (distance == k){
			this.delete(new ReplicaSong(requestLst[KEY],null,-1));
		}
	
	}
	
	@Override
	public void queryRequest(String[] requestLst){
		int hashed = Util.hash(requestLst[KEY]);
		//if (isBetween(hashed,this.prevId,this.myId)){
		int port = Integer.parseInt(requestLst[SRC]);
		String val = query(new ReplicaSong(requestLst[KEY], null,-1));
		//Send response to requester
		if(val == null){
			if (this.nextPort == port){
				MySocket.send(port,""+this.myPort + ",NOT_FOUND," + requestLst[KEY]);
				this.printQueryAnswer("not found" + ","+requestLst[KEY]);
				Util.inserts.decrementAndGet();
			}
			else
				MySocket.send(this.nextPort,requestLst[SRC] + ",QUERY," + requestLst[KEY]);
		}
		else{ 
			MySocket.send(port, ""+this.myPort + ",FOUND," + requestLst[KEY] + "," + val);
			this.printQueryAnswer("found" + ","+requestLst[KEY] + ","+val);
			Util.inserts.decrementAndGet();
		}
			
	}
	
	@Override
	public void queryStarRequest(String[] requestLst){
		Collection<Bucket> bc = buckets.values();
		int port = Integer.parseInt(requestLst[SRC]);
		for(Bucket b : bc){
			for(Song s : b){
				ReplicaSong rs = ((ReplicaSong)s);
				//send to next node
				//print(requestLst[SRC] + ",FOUND," + s.Key + "," + s.Val);
				if (rs.distance == k-1){
					MySocket.send(port, "" + this.myId + ",FOUND," + s.Key + "," + s.Val);
					print("FOUND " + s.Key + " " + s.Val+ " "+rs.distance);
				}
				else{
					print("replica " + s.Key + " " + s.Val + " "+rs.distance);
				}
			}
		}
		if (port != this.nextPort){
			MySocket.send(this.nextPort, requestLst[SRC] + ",QUERY,*");
		}
		
	}

	public String query(ReplicaSong song){
		
		Bucket bucket = buckets.get(Util.hash(song.Key));
		if (bucket == null)
			return null;
		int i = bucket.indexOf(song);
		String songVal = null;
		int dist = song.distance;
		if(i == -1 ){//this will work if OR is short-cirquited
		}
		else{
			ReplicaSong s = ((ReplicaSong) bucket.get(i));
			if (s.distance == k-1)
				songVal = s.Val;
		}
		
		return songVal;
	
		//send answer to the requester
			
	}
	


	

}
