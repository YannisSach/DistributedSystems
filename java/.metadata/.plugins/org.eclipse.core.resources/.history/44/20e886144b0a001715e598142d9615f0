import java.net.*;
import java.util.Collection;
import java.io.*;


public class MySocket{
	public Socket mySocket;
	public int myPort;
	
	public MySocket(int port){
		this.myPort = port;
		Socket MyClient=null;
		//int c=0;
		while (true){
			//if (c>0)
			//	System.out.println("11111");
			try {
				MyClient = new Socket("localhost", port);
				break;
			}
			catch (IOException e) {
				System.out.println(e);
			//	c++;
				continue;
			}	    
		}
		this.mySocket = MyClient;
		
	}
	
	
	@Override 
	public String toString(){
		Collection<Bucket> bc = buckets.values();
		String prefix  = ""+ this.idx + "(" + this.myId + ")" + "Next:" + this.nextPort + " " + this.nextId + "Prev:" + this.prevPort + " " + this.prevId;
		for (Bucket b : bc){
			for (Song sg : b){
				ReplicaSong rs = (ReplicaSong) sg;
				prefix += "\n" + this.myId + ":" + rs.Key + " " + rs.Val + " " + rs.distance;
				
			}
		}
		return prefix;
	}
	
	
	
	
	public MySocket(Socket sock){
		this.mySocket = sock;
		this.myPort = sock.getPort();
	}
	
	public String read(){
		BufferedReader input;
		String answer="error";
	    try {
	    	InputStreamReader is = new InputStreamReader (mySocket.getInputStream());
	    	input = new BufferedReader(is);
	    	answer = input.readLine();
	    	return answer;
	    }
	    catch (IOException e) {
	       System.out.println(e);
	       
	    }
	    return answer;
	}
	
	static public void send(int port, String input){
		MySocket JoinSocket = new MySocket(port);
		JoinSocket.write(input);
		JoinSocket.close();
	}
	
	public void write(String input){
		PrintWriter output;
	    try {
	       output = new PrintWriter(mySocket.getOutputStream(),true);
	       output.println(input);
	    }
	    catch (IOException e) {
	       System.out.println(e);
	    }
	}
	
	public void close(){
		try {
			this.mySocket.close();
		}
		catch (IOException e){
			System.out.println(e);
		}
	}

}
